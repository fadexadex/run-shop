// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  shippingAddress String?
  role            Role     @default(CUSTOMER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  seller   Seller?
  orders   Order[]
  wishlist Wishlist?
  chats    Chat[]
  messages Message[]
  ratings  Rating[]
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

model Seller {
  id            String        @id @default(uuid())
  userId        String        @unique
  catalogueName String
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet   Wallet?
  products Product[]
  orders   Order[]
  chats    Chat[]
  ratings  Rating[]
}

enum PaymentMethod {
  ONLINE
  CASH
}

model Wallet {
  id          String   @id @default(uuid())
  sellerId    String   @unique
  balance     Decimal  @default(0.00)
  totalEarned Decimal  @default(0.00)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  seller       Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Product {
  id            String   @id @default(uuid())
  sellerId      String
  name          String
  description   String
  price         Decimal
  stockQuantity Int
  categoryId    String
  imageUrls     String[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  seller     Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  wishlistItems WishlistItem[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  sellerId      String
  totalPrice    Decimal
  orderStatus   OrderStatus
  paymentMethod PaymentMethod
  escrowStatus  EscrowStatus  @default(HELD)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller       Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  chats        Chat[]
  transactions Transaction[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum EscrowStatus {
  HELD
  RELEASED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String       @id @default(uuid())
  buyerId   String
  sellerId  String
  orderId   String?
  status    ChatStatus   @default(OPEN)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  buyer    User      @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  seller   Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  order    Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  messages Message[]
}

enum ChatStatus {
  OPEN
  CLOSED
  ARCHIVED
}

model Message {
  id       String   @id @default(uuid())
  chatId   String
  senderId String
  content  String
  sentAt   DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String            @id @default(uuid())
  walletId        String
  orderId         String
  amount          Decimal
  transactionType TransactionType
  status          TransactionStatus
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Rating {
  id        String   @id @default(uuid())
  userId    String
  sellerId  String
  rating    Int
  review    String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}
