// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    String   @id @default(uuid())
  email      String   @unique
  password   String
  first_name String
  last_name  String
  role       Role
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sellers  Seller?
  orders   Order[]
  wishlist Wishlist[]
  chats    Chat[]
  messages Message[]
  ratings  Rating[]
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

model Seller {
  seller_id      String        @id @default(uuid())
  user_id        String        @unique
  catalogue_name String
  payment_method PaymentMethod
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  user     User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  wallets  Wallet?
  products Product[]
  orders   Order[]
  chats    Chat[]
  ratings  Rating[]
}

enum PaymentMethod {
  ONLINE
  CASH
}

model Wallet {
  wallet_id    String   @id @default(uuid())
  seller_id    String   @unique
  balance      Decimal  @default(0.00)
  total_earned Decimal  @default(0.00)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  seller       Seller        @relation(fields: [seller_id], references: [seller_id], onDelete: Cascade)
  transactions Transaction[]
}

model Product {
  product_id     String   @id @default(uuid())
  seller_id      String
  name           String
  description    String
  price          Decimal
  stock_quantity Int
  category_id    String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  seller      Seller      @relation(fields: [seller_id], references: [seller_id], onDelete: Cascade)
  category    Category    @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  order_items OrderItem[]
  wishlist    Wishlist[]
}

model Category {
  category_id String   @id @default(uuid())
  name        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  products Product[]
}

model Order {
  order_id       String        @id @default(uuid())
  user_id        String
  seller_id      String
  total_price    Decimal
  order_status   OrderStatus
  payment_method PaymentMethod
  escrow_status  EscrowStatus  @default(HELD)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  user         User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  seller       Seller        @relation(fields: [seller_id], references: [seller_id], onDelete: Cascade)
  order_items  OrderItem[]
  chats        Chat[]
  transactions Transaction[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum EscrowStatus {
  HELD
  RELEASED
  CANCELLED
}

model OrderItem {
  order_item_id String  @id @default(uuid())
  order_id      String
  product_id    String
  quantity      Int
  price         Decimal

  order   Order   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Wishlist {
  wishlist_id String   @id @default(uuid())
  user_id     String
  product_id  String
  created_at  DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Chat {
  chat_id       String       @id @default(uuid())
  buyer_id      String
  seller_id     String
  order_id      String?
  chat_platform ChatPlatform
  status        ChatStatus   @default(OPEN)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  buyer    User      @relation(fields: [buyer_id], references: [user_id], onDelete: Cascade)
  seller   Seller    @relation(fields: [seller_id], references: [seller_id], onDelete: Cascade)
  order    Order?    @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  messages Message[]
}

enum ChatPlatform {
  IN_APP
  WHATSAPP
}

enum ChatStatus {
  OPEN
  CLOSED
  ARCHIVED
}

model Message {
  message_id String   @id @default(uuid())
  chat_id    String
  sender_id  String
  content    String
  sent_at    DateTime @default(now())

  chat   Chat @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  sender User @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)
}

model Transaction {
  transaction_id   String            @id @default(uuid())
  wallet_id        String
  order_id         String
  amount           Decimal
  transaction_type TransactionType
  status           TransactionStatus
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt

  wallet Wallet @relation(fields: [wallet_id], references: [wallet_id], onDelete: Cascade)
  order  Order  @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Rating {
  rating_id  String   @id @default(uuid())
  user_id    String
  seller_id  String
  rating     Int
  review     String?
  created_at DateTime @default(now())

  user   User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  seller Seller @relation(fields: [seller_id], references: [seller_id], onDelete: Cascade)
}
